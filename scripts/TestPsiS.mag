// Paramters defining the prime p = f*lA^eA*lB^eB - 1
f := 1;
lA := 2;
lB := 3;
eA := 372;
eB := 239;

Border := 1076415339332851335838408278837787304900791017342367285006484190592481075231153579549080863047304729836926607724267;

// Define the prime p
p := f*lA^eA*lB^eB-1;
assert IsPrime(p: Proof:=false);

// or, explicitly...
assert p eq
1035471774176930525297776823786680532142738964554907117011618967905467894068247\
8846502882896561066713624553211618840202385203911976522554393044160468771151816\
976706840078913334358399730952774926980235086850991501872665651576831;

// Prime field of order p
Fp := GF(p);
Fborder := GF(Border);
// The quadratic extension via x^2 + 1 since p = 3 mod 4
Fp2<i> := ExtensionField<Fp,x|x^2+1>;

// E0 is the starting curve E0/Fp2: y^2=x^3+x (the A=0 Montgomery curve)
// EA is Randall's public key curve E0/<R>
E0 := EllipticCurve([Fp2|1,0]);

a1 := Fp![5578577893954175363138174207813864244722420514515667787901732004748162164580739958667551560459285294968600354125316586770126644259650461698460712902021072825518886848856784387262577760353111481186992219704420770118513491988129];
a2 := Fp![5262706819393939520542272411847889621636794187508506672548144826883651013141971143219690022454224233437487693151913158997208181827032534869785444168419095047816405944405809196447272695986838919445490501391443587749011266221514];

A := Fp2![a2 + a1*i];

EA := EllipticCurve([Fp2|1, A]);
print IsSupersingular(E0) and IsSupersingular(EA);

// Create points psi(S), R1, and R2
// psiS := EA![20822980237232112531912212748 + 51278778511252216111315483*i,125228132159772071454873118180 + 877013910730177471301131354840*i];
// R1 := EA![2052111761442405241083921322120 + 151421532372212653931171585610*i,187118178183224219139992423888143 + 713614811726411377219247134156*i];
// R2 := EA![12425524171173160202138121218140173 + 5921011320555831351482220320666*i,10924159824912315518921456163211 + 21423833239105219063319119175*i];
// a := Fborder!156971921972241659215198628498
// b := Fborder!161788118612315171211492770105

// newPsiS := a*R1 + b*R2;

// print psiS eq newPsiS;
